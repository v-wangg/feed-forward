const mongoose = require('mongoose');
const { Schema } = mongoose;

const RecipientSchema = require('./recipient');

const surveySchema = new Schema({
    title: String,
    subject: String,
    body: String,
    /**
     * We have imported the schema of the recipient subdocument collection; we can define a list of recipients    within the survey schema such that whenever mongoose saves a new survey record, it will see that the       recipients needs to specify a list of recipients which FOLLOW this particular schema given which we        defined
     * In turn, it will essentially store a list of recipient objects inside this recipients property, which      acts as a subdocument collection
     */
    recipients: [RecipientSchema],
    yes: { type: Number, default: 0 },
    no: { type: Number, default: 0 },
    /**
     * Here we are defining a relationship field, whereby each survey stored in our surveys collection stores a   reference to the user who owns this survey record; this is stored in the form of a user id
     * Schema.Types.ObjectId is the same as saying "Number", except it's just more specific in that the type of   this property MUST be an ObjectId (the user id generated by MongoDB)
     * The ref property lets mongoose know that this user reference must belong to the User collection
     * By convention, we record this property with an undercore _ in front to denote that this is a               relationship field 
     * This process MUST be repeated within the User Schema as well, so as to maintain a reference from the       user to all their surveys and vice versa
     * We could definitely just have made a Surveys Subdocument Collection inside each User record, BUT MongoDB   sets a limit of 4MB of data stored per record; a typical user is about 20 bytes, so 4MB would entail       about 200,000 stored emails
        * If we stored these emails as recipients, this would mean that every User in our app can send a          maximum of 200,000 surveys to recipients across ALL the surveys they've created; not only that, but     it would mean we can't store ANY more information about the user within their record once it's capped
        * To fix this, if we just keep a separate surveys collection and maintain a reference to and from the     user, we're able to enforce a cap of 200,000 recipients PER SURVEY CREATED rather than for an entire    account
     */
    _user: { type: Schema.Types.ObjectId, ref: "User" },
    dateSent: Date,
    lastResponded: Date
});

mongoose.model('surveys', surveySchema);